(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{390:function(t,a,s){"use strict";s.r(a);var _=s(3),v=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_1-c-概述"}},[t._v("1.C++ 概述")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-1-c-简介"}},[t._v("1.1 C++ 简介")])]),a("li",[a("a",{attrs:{href:"#_1-2-c-起源"}},[t._v("1.2 C++起源")])]),a("li",[a("a",{attrs:{href:"#_1-3-可移植性和标准"}},[t._v("1.3 可移植性和标准")])]),a("li",[a("a",{attrs:{href:"#_1-4-为什么-c-会成功"}},[t._v("1.4 为什么 C++会成功")])])])]),a("li",[a("a",{attrs:{href:"#_2-第一个-c-程序"}},[t._v("2.第一个 C++程序")])]),a("li",[a("a",{attrs:{href:"#_3-总结"}},[t._v("3. 总结")]),a("ul",[a("li",[a("a",{attrs:{href:"#_3-1-面向过程"}},[t._v("3.1 面向过程")])]),a("li",[a("a",{attrs:{href:"#_3-2-面向对象"}},[t._v("3.2 面向对象")])]),a("li",[a("a",{attrs:{href:"#_3-3-面向对象三大特性"}},[t._v("3.3 面向对象三大特性")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"_1-c-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-c-概述"}},[t._v("#")]),t._v(" 1.C++ 概述")]),t._v(" "),a("h3",{attrs:{id:"_1-1-c-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-c-简介"}},[t._v("#")]),t._v(" 1.1 C++ 简介")]),t._v(" "),a("p",[t._v("“C++”中的++来自于 C 语言中的递增运算符++， 该运算符将变量加 1。C++起初也叫”C with Clsss”。通过名称表明，C++是对 C 的扩展，因此 C++是 C 语言的超集，这意味着任何有效的 C 程序都是有效的 C++程序。C++程序可以使用已有的 C 程序库。\n库是编程模块的集合，可以在程序中调用它们。库对很多常见的编程问题提供了可靠的解决方法，因此可以节省程序员大量的时间和工作量。")]),t._v(" "),a("p",[t._v("C++语言在 C 语言的基础上添加了面向对象编程和泛型编程的支持。C++继承了 C 语言高效，简洁，快速和可移植的传统。")]),t._v(" "),a("p",[t._v("C++融合了 3 种不同的编程方式 :")]),t._v(" "),a("ul",[a("li",[t._v("C 语言代表的过程性语言")]),t._v(" "),a("li",[t._v("C++在 C 语言基础上添加的类代表的面向对象语言")]),t._v(" "),a("li",[t._v("C++模板支持的泛型编程")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("C 语言和 C++语言的关系：")]),t._v("\nC++语言是在 C 语言的基础上，添加了面向对象、模板等现代程序设计语言的特性而发展起来的。两者无论是从语法规则上，还是从运算符的数量和使用上，都非常相似，所以我们常常将这两门语言统称为“C/C++”。")])]),t._v(" "),a("p",[t._v("C 语言和 C++并不是对立的竞争关系：")]),t._v(" "),a("ol",[a("li",[t._v("C++是 C 语言的加强，是一种更好的 C 语言;")]),t._v(" "),a("li",[t._v("C++是以 C 语言为基础的，并且完全兼容 C 语言的特性。")])]),t._v(" "),a("p",[t._v("C 语言和 C++语言的学习是可以相互促进。学好 C 语言，可以为我们将来进一步地学习 C++语言打好基础，而 C++语言的学习，也会促进我们对于 C 语言的理解，从而更好地运用 C 语言。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-c-起源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-c-起源"}},[t._v("#")]),t._v(" 1.2 C++起源")]),t._v(" "),a("p",[t._v("与 C 语言一样，C++也是在贝尔实验室诞生的，Bjarne Stroustrup(本贾尼·斯特劳斯特卢普)在 20 世纪 80 年代在这里开发了这种语言。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jihulab.com/AmosHogg/picbed/-/raw/main/pictures/2023/05/2_17_55_49_202305021755974.png",alt:"Bjarne Stroustrup"}})]),t._v(" "),a("p",[t._v("C++程序员就是这么的绝顶聪明。")]),t._v(" "),a("p",[t._v("Stroustrup 关心的是让 C++更有用，而不是实施特定的编程原理或风格。在确定语言特性方面，真正的编程比纯粹的原理更重要。Stroustrup 之所以在 C 的基础上创建 C++,是因为 C 语言简洁、适合系统编程、使用广泛且与 UNIX 操作系统联系紧密。")]),t._v(" "),a("p",[t._v("用他自己的话来说，“C++主要是为了我的朋友和我不必再使用汇编语言、C 语言或者其他现代高级语言来编程而设计的。它的主要功能是可以更方便得编写出好程序，让每个程序员更加快乐”。")]),t._v(" "),a("h3",{attrs:{id:"_1-3-可移植性和标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-可移植性和标准"}},[t._v("#")]),t._v(" 1.3 可移植性和标准")]),t._v(" "),a("p",[t._v("假设为运行 windows 2000 的老式奔腾 pC 编写了一个很好用的 C++程序，而管理员决定使用不同操作系统(比如说 MaC OS 或 Linux)和处理器的计算机替换它。该程序是否可在新平台运行呢？当然，但是必须使用为新平台设计的 C++编译器重新编译。但是是否需要修改写好的代码？如果不需要修改代码的情况下，重新编译程序后，程序依然运行良好，该程序是可移植的。")]),t._v(" "),a("p",[t._v("程序是否可移植性有两个问题需要解决。第一是硬件，针对特定硬件编程的程序是不可移植的。第二，语言的实现，windows xp C++ 和 Redhat Linux 或 MaC OS X 对 C++的实现不一定相同。虽然我们希望 C++版本与其他版本兼容，但是如果没有一个公开的标准，很难做到。因此，美国国家标准局(AmeriCan National Standards Institute,ANSI)在 1990 年设立一个委员会专门负责制定 C++标准(ANSI 制定了 C 语言的标准)。国际标准化组织(International Organization for Standardization，ISO)很快通过自己的委员会加入到这个行列，创建了联合组织 ANSI/ISO,制定 C++标准。")]),t._v(" "),a("p",[t._v("经过多年的努力，制定出了一个国际标准 ISO/IEC 14882:1998 ，并于 1998 年获得了 ISO、IEC(International EleCtroteChniCal Committee,国际电工技术委员会)和 ANSI 的批准。这个标准就是我们经常所说的 C++98。它不仅描述了已有的 C++特性，还对语言进行了扩展，添加了异常、运行阶段类型识别(RTTI)、模板和标准模板库(STL).")]),t._v(" "),a("p",[t._v("2003 年，发布了 C++标准第二版(IOS/IEC 14882:2003),这一版本对第一版修订了一些错误，但并没有改变语言特性，因此 C++98 表示 C++98/C++2003.")]),t._v(" "),a("p",[t._v("C++不断发展。IOS 标准委员会于 2011 年 8 月批准了新标准 ISO/IEC 14882:2011,该标准被称为 C++11,与 C++98 一样 C++11 也新增了许多特性。")]),t._v(" "),a("p",[t._v("ISO C++标准还吸收了 ANSI C 语言标准，C++尽量做到是 C 的超集。意味着在理想情况下，任何有效的 C 程序都应该是有效的 C++程序。")]),t._v(" "),a("p",[t._v("ANSI 不仅定义了 C 语言，还 定义了一个 ANSI C 必须实现的标准 C 库。C++也在使用这个库，另外 ANSI/ISO C++标准还提供了一个 C++标准类库。、")]),t._v(" "),a("h3",{attrs:{id:"_1-4-为什么-c-会成功"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-为什么-c-会成功"}},[t._v("#")]),t._v(" 1.4 为什么 C++会成功")]),t._v(" "),a("p",[t._v("C++最初的目的是将 C 语言转变为 OOP（面向对象程序设计）语言，但是 C++后来并没有这么做，而是立足于程序的实际。因为在 C 语言方面大量投入的程序员使其完全丢掉 C 语言那种编程的思考方式，转而去接受一种新的语言，新的思维，那么将会导致这些程序员中大部分人在短时间内可能毫无成果，使其生产率降低。但是如果让这些 C 程序员在已有知识的基础上，再去学习 C++语言，理解运用 OOP，那么也只是在其已有思维的基础上进行扩展而已，这样可以保持其更好的生产率。")]),t._v(" "),a("p",[t._v("简而言之，强迫程序员放弃 C 语言和 C 语言的思考方式，而去转到 OOP 上是需要代价的，但是从 C 语言转到 C++所花费的代价就会小很多。所以也可以理解为 C++的出现并不是去替代 C,而是对 C 的扩展，所以在 C++中既可以使用 C++新特性，并且可以使用 C 的过程式思维来编写程序。")]),t._v(" "),a("p",[t._v("对于传统的结构化语言，我们向来没有太多的疑惑，函数调用那么自然而明显，只是从程序的某一个地点调到另一个地点去执行。但是对于面向对象(OO)语言，我们疑惑就会很多。其原因就是 C++编译器为我们程序员做了太多隐藏的工作：构造函数，析构函数、虚函数、继承、多态....有时候它为我们合成出一些额外的函数,有时候它又偷偷在我们写的函数里，放进更多的操作。有时候也会给我们的对象里放进一些奇妙的东西，使得我们 sizeof 的时候结果可我们预期不一样。")]),t._v(" "),a("h2",{attrs:{id:"_2-第一个-c-程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-第一个-c-程序"}},[t._v("#")]),t._v(" 2.第一个 C++程序")]),t._v(" "),a("div",{staticClass:"language-Cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.c --\x3e 打印输出“Hello_World”")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cont "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" “Hello_World” "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("分析:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("// hello.c --\x3e 打印输出“Hello_World”")]),t._v(" 注释解释说明代码")]),t._v(" "),a("li",[a("code",[t._v("#include<iostream>;")]),t._v(' 预编译指令，引入头文件"iostream".')]),t._v(" "),a("li",[a("code",[t._v("using namespace std;")]),t._v(" 使用标准命名空间")]),t._v(" "),a("li",[a("code",[t._v("cout << “hello world”<< endl;")]),t._v(" 和 printf 功能一样，输出字符串”hello wrold”")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("问题 1：C++头文件为什么没有.h？")])]),t._v(" "),a("p",[t._v("在 C 语言中头文件使用扩展名.h,将其作为一种通过名称标识文件类型的简单方式。但是 C++得用法改变了，C++头文件没有扩展名。但是有些 C 语言的头文件被转换为 C++的头文件，这些文件被重新命名，丢掉了扩展名.h(使之成为 C++风格头文件)，并在文件名称前面加上前缀 C(表明来自 C 语言)。例如 C++版本的 math.h 为 Cmath.")]),t._v(" "),a("p",[t._v("由于 C 使用不同的扩展名来表示不同文件类型，因此用一些特殊的扩展名(如 hpp 或 hxx)表示 C++的头文件也是可以的，ANSI/IOS 标准委员会也认为是可以的，但是关键问题是用哪个比较好，最后一致同意不适用任何扩展名。")]),t._v(" "),a("p",[a("strong",[t._v("问题 2：using namespace std 是什么?")])]),t._v(" "),a("p",[t._v("namespace 是指标识符的各种可见范围。命名空间用关键字 namespace 来定义。命名空间是 C++的一种机制，用来把单个标识符下的大量有逻辑联系的程序实体组合到一起。此标识符作为此组群的名字。")]),t._v(" "),a("p",[a("strong",[t._v("问题 3：cout 、endl 是什么？")])]),t._v(" "),a("p",[t._v("Cout 是 C++中的标准输出流，endl 是输出换行并刷新缓冲区。")]),t._v(" "),a("p",[a("strong",[t._v("问题 4：注释有什么作用？")])]),t._v(" "),a("p",[t._v("作用：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码。")])]),t._v(" "),a("h2",{attrs:{id:"_3-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[t._v("#")]),t._v(" 3. 总结")]),t._v(" "),a("h3",{attrs:{id:"_3-1-面向过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-面向过程"}},[t._v("#")]),t._v(" 3.1 面向过程")]),t._v(" "),a("p",[t._v("面向过程是一种以过程为中心的编程思想。")]),t._v(" "),a("p",[t._v("通过分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。")]),t._v(" "),a("p",[t._v("面向过程编程思想的核心：功能分解，自顶向下，逐层细化（程序=数据结构+算法）。")]),t._v(" "),a("p",[t._v("面向过程编程语言存在的主要缺点是不符合人的思维习惯，而是要用计算机的思维方式去处理问题，而且面向过程编程语言重用性低，维护困难。")]),t._v(" "),a("h3",{attrs:{id:"_3-2-面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-面向对象"}},[t._v("#")]),t._v(" 3.2 面向对象")]),t._v(" "),a("p",[t._v("面向对象编程（ObjeCt-Oriented Programming）简称 OOP 技术，是开发计算机应用程序的一种新方法、新思想。过去的面向过程编程常常会导致所有的代码都包含在几个模块中，使程序难以阅读和维护。在做一些修改时常常牵一动百，使以后的开发和维护难以为继。而使用 OOP 技术，常常要使用许多代码模块，每个模块都只提供特定的功能，它们是彼此独立的，这样就增大了代码重用的几率，更加有利于软件的开发、维护和升级。")]),t._v(" "),a("p",[t._v("在面向对象中，算法与数据结构被看做是一个整体，称作对象，现实世界中任何类的对象都具有一定的属性和操作，也总能用数据结构与算法两者合一地来描述，所以可以用下面的等式来定义对象和程序：")]),t._v(" "),a("ul",[a("li",[t._v("对象 = 算法 + 数据结构")]),t._v(" "),a("li",[t._v("程序 = 对象 + 对象 + ……")])]),t._v(" "),a("p",[t._v("从上面的等式可以看出，程序就是许多对象在计算机中相继表现自己，而对象则是一个个程序实体。")]),t._v(" "),a("p",[t._v("面向对象编程思想的核心：应对变化，提高复用。")]),t._v(" "),a("h3",{attrs:{id:"_3-3-面向对象三大特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-面向对象三大特性"}},[t._v("#")]),t._v(" 3.3 面向对象三大特性")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("封装\n把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。\n类将成员变量和成员函数封装在类的内部，根据需要设置访问权限，通过成员函数管理内部状态。")])]),t._v(" "),a("li",[a("p",[t._v("继承\n继承所表达的是类之间相关的关系，这种关系使得对象可以继承另外一类对象的特征和能力。\n继承的作用：避免公用代码的重复开发，减少代码和数据冗余。")])]),t._v(" "),a("li",[a("p",[t._v("多态\n多态性可以简单地概括为“一个接口，多种方法”，字面意思为多种形态。程序在运行时才决定调用的函数，它是面向对象编程领域的核心概念。")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);