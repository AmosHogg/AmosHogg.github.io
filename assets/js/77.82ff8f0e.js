(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{392:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#_1-数据类型"}},[s._v("1. 数据类型")]),t("ul",[t("li",[t("a",{attrs:{href:"#_1-1-基本数据类型"}},[s._v("1.1 基本数据类型")])]),t("li",[t("a",{attrs:{href:"#_1-2-整型"}},[s._v("1.2 整型")])]),t("li",[t("a",{attrs:{href:"#_1-3-浮点型-实型"}},[s._v("1.3 浮点型（实型）")])]),t("li",[t("a",{attrs:{href:"#_1-4-字符型"}},[s._v("1.4 字符型")])]),t("li",[t("a",{attrs:{href:"#_1-5-布尔类型"}},[s._v("1.5 布尔类型")])]),t("li",[t("a",{attrs:{href:"#_1-6-sizeof-关键字"}},[s._v("1.6 sizeof 关键字")])])])]),t("li",[t("a",{attrs:{href:"#_2-变量"}},[s._v("2. 变量")]),t("ul",[t("li",[t("a",{attrs:{href:"#_2-1-变量使用的基本步骤"}},[s._v("2.1 变量使用的基本步骤")])]),t("li",[t("a",{attrs:{href:"#_2-2-变量使用的注意事项"}},[s._v("2.2 变量使用的注意事项")])])])]),t("li",[t("a",{attrs:{href:"#_3-类型转换"}},[s._v("3. 类型转换")]),t("ul",[t("li",[t("a",{attrs:{href:"#_3-1-旧式风格的类型转换"}},[s._v("3.1 旧式风格的类型转换")])]),t("li",[t("a",{attrs:{href:"#_3-2-现代-c-风格的类型转换"}},[s._v("3.2 现代 C++风格的类型转换")])])])]),t("li",[t("a",{attrs:{href:"#_4-常量"}},[s._v("4. 常量")]),t("ul",[t("li",[t("a",{attrs:{href:"#_4-1-define-预处理器"}},[s._v("4.1 define 预处理器")])]),t("li",[t("a",{attrs:{href:"#_4-2-const-关键字"}},[s._v("4.2 const 关键字")])])])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"_1-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据类型"}},[s._v("#")]),s._v(" 1. 数据类型")]),s._v(" "),t("p",[s._v("为了方便数据的管理和分配，C++将数据根据所占字节分为了不同的数据类型。任何数据都有一个一一对应的数据类型。")]),s._v(" "),t("p",[s._v("C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存。")]),s._v(" "),t("p",[s._v("在 C++中有两种数据类型：基本数据类型、复合类型。")]),s._v(" "),t("blockquote",[t("p",[s._v("拓展：字节\n思考：char 类型占 1 个字节，int 类型占 4 个字节等。那么字节到底是什么意思呢？\n在计算机单位里，最基本的单位是 bit。在 bit 位里存放的都是计算机能够识别的二进制数 0 和 1。\n而字节是单位 byte，1 byte = 8 bit ，字节(Byte，拜特)是计算机处理数据的基本单位，计算机以字节为单位存储和解释信息。")])]),s._v(" "),t("h3",{attrs:{id:"_1-1-基本数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-基本数据类型"}},[s._v("#")]),s._v(" 1.1 基本数据类型")]),s._v(" "),t("p",[s._v("C++定义了一套包括算术类型(arithmetic iype)和空类型(void)在内的基本数据类型。其中算术类型包含了字符、整型数、布尔值和浮点数。空类型不对应具体的值，仅用 于一些特殊的场合，例如最常见的是，当两数不返回任何值时使用空 类型作为返回类型。")]),s._v(" "),t("p",[s._v("算术类型分为两类:整型 (integral type，包括字符和布尔类型在内)和浮点型。")]),s._v(" "),t("p",[s._v("算术类型的尺寸(也就是该类型数据所占的比特数)在不同机器上有所差别。下表列出了 C++标准规定的尺寸的最小值，同时允许编译器赋子这些类型更大的尺寸。某一类型所占的比特数不同，它所能表示的数据范围也不一样。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("类型")]),s._v(" "),t("th",[s._v("含义")]),s._v(" "),t("th",[s._v("位数")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("bool")]),s._v(" "),t("td",[s._v("布尔类型")]),s._v(" "),t("td",[s._v("未定义")])]),s._v(" "),t("tr",[t("td",[s._v("char")]),s._v(" "),t("td",[s._v("字符")]),s._v(" "),t("td",[s._v("8 位")])]),s._v(" "),t("tr",[t("td",[s._v("wchar_t")]),s._v(" "),t("td",[s._v("宽字节")]),s._v(" "),t("td",[s._v("16 位")])]),s._v(" "),t("tr",[t("td",[s._v("char16_t")]),s._v(" "),t("td",[s._v("Unicode 字符")]),s._v(" "),t("td",[s._v("16 位")])]),s._v(" "),t("tr",[t("td",[s._v("short")]),s._v(" "),t("td",[s._v("短整型")]),s._v(" "),t("td",[s._v("16 位")])]),s._v(" "),t("tr",[t("td",[s._v("int")]),s._v(" "),t("td",[s._v("整型")]),s._v(" "),t("td",[s._v("32 位")])]),s._v(" "),t("tr",[t("td",[s._v("long")]),s._v(" "),t("td",[s._v("长整型")]),s._v(" "),t("td",[s._v("64 位")])]),s._v(" "),t("tr",[t("td",[s._v("float")]),s._v(" "),t("td",[s._v("单精度浮点数")]),s._v(" "),t("td",[s._v("6 位有效数字")])]),s._v(" "),t("tr",[t("td",[s._v("double")]),s._v(" "),t("td",[s._v("双精度浮点数")]),s._v(" "),t("td",[s._v("10 位有效数字")])])])]),s._v(" "),t("p",[s._v("布尔类型(bool)的取值是真(true)或者假(false)。")]),s._v(" "),t("p",[s._v("C++提供了几种字符类型，其中多数支持国际化。基本的字符类型是 char ，一个 char 的空间应确保可以存放机器基本字符集中任意字符对应的数字值。也就是说，一个 char 的 大小和一个机器字节一样。")]),s._v(" "),t("p",[s._v("其他字符类型用于扩展字符集，如"),t("code",[s._v("wchart")]),s._v("、"),t("code",[s._v("charl6t")]),s._v("、"),t("code",[s._v("char32t")]),s._v("。"),t("code",[s._v("wchar t")]),s._v(" 类型用于确保可以存放机器最大扩展字符集中的任意一个字符，类型"),t("code",[s._v("char16_t")]),s._v(" 和 "),t("code",[s._v("char 32_t")]),s._v("则为 Unicode 字符集服务(Unicode 是用于表示所有自然语言中字符的标准)。")]),s._v(" "),t("p",[s._v("除字符和布尔类型之外，其他整型用于表示(可能)不同尺寸的整数。C++语言规定一个 int 至少和一个 short 一样大，一个 1ong 至少和一个"),t("code",[s._v("int")]),s._v("一样大，一个"),t("code",[s._v("longlong")]),s._v("至少和一个"),t("code",[s._v("long")]),s._v("一样大。其中，数据类型"),t("code",[s._v("longlong")]),s._v("是在 C++11 中新定义的。")]),s._v(" "),t("p",[s._v("浮点型可表示单精度、双精度和扩展精度值。C++标准指定了一个浮点数有效位数的 最小值，然而大多数编译器都实现了更高的精度。通常，float 以 1 个字(32 比特)来表示，double 以 2 个字(64 比特)来表示，1ong double 以 3 或 4 个字(96 或 128 比特)来表示。一般水说，类型 f1oat 和 doubie 分別有 7 和 16 个有效位:类型 1ong double 则常常被用于有特殊浮点需求的硬件，它的具体实现不同，精度也各不相同。")]),s._v(" "),t("h3",{attrs:{id:"_1-2-整型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-整型"}},[s._v("#")]),s._v(" 1.2 整型")]),s._v(" "),t("p",[s._v("整型变量表示整数类型的数据。C++中共有 4 种表示整型的类型，区别在于所占内存空间和可表示的取值范围不同。")]),s._v(" "),t("blockquote",[t("p",[s._v("注：实际开发中，较多使用 int 类型表示整型数据，占用空间大小为 4 字节。")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("数据类型")]),s._v(" "),t("th",[s._v("占用空间")]),s._v(" "),t("th",[s._v("取值范围")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("short（短整型）")]),s._v(" "),t("td",[s._v("2 字节")]),s._v(" "),t("td",[s._v("$-2^{15} \\sim 2^{15}$")])]),s._v(" "),t("tr",[t("td",[s._v("int（整型）")]),s._v(" "),t("td",[s._v("4 字节")]),s._v(" "),t("td",[s._v("$-2^{31} \\sim 2^{31}$")])]),s._v(" "),t("tr",[t("td",[s._v("long（长整型）")]),s._v(" "),t("td",[s._v("Windows 位 4 字节，Linux 为 4 字节（32 位）、8 字节（64 位）")]),s._v(" "),t("td",[s._v("$-2^{31} \\sim 2^{31}-1$")])]),s._v(" "),t("tr",[t("td",[s._v("long long（长整型）")]),s._v(" "),t("td",[s._v("8 字节")]),s._v(" "),t("td",[s._v("$-2^{63} \\sim 2^{63}-1$")])])])]),s._v(" "),t("h3",{attrs:{id:"_1-3-浮点型-实型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-浮点型-实型"}},[s._v("#")]),s._v(" 1.3 浮点型（实型）")]),s._v(" "),t("p",[s._v("作用：浮点型变量表示小数类型的数据。")]),s._v(" "),t("p",[s._v("浮点型变量分为两种，区别在于表示的有效数字范围不同。")]),s._v(" "),t("ol",[t("li",[s._v("单精度 float：4 字节")]),s._v(" "),t("li",[s._v("双精度 double：8 字节")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[s._v("有效数字包括整数部分和小数部分。")]),s._v(" "),t("li",[s._v("C++输出多位小数时默认会显示 6 位有效数字，需进行额外配置以完整显示全部有效数字。")]),s._v(" "),t("li",[s._v("float 类型表示小数时，在数字末尾显式地使用字母 f 表示单精度，否则编译器会默认将小数视为双精度浮点型（double），再进行类型转换（由 double 型转换为 float 型）。")])])]),s._v(" "),t("h3",{attrs:{id:"_1-4-字符型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-字符型"}},[s._v("#")]),s._v(" 1.4 字符型")]),s._v(" "),t("p",[s._v("在字符型 C++中，字符型只有 1 个字节。字符型变量是将对应的 ASCII 编码存放至内存，而不是字符本身。在使用此变量时，会讲 ASCII 编码转义并输出。")]),s._v(" "),t("p",[s._v("存储：'a’==＞码值 97 ==＞ 二进制(110 0001)==＞存储\n读取：二进制(110 0001) => 97 ===>'a'=＞ 显示")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[s._v("使用单引号表示字符，且单引号内有且仅有 1 个字符，不可以是字符串。")]),s._v(" "),t("li",[s._v("使用 (int) ch 查询字符对应的 ASCII 编码。'a’对应 97，'A’对应 65。")])])]),s._v(" "),t("p",[s._v("转义字符：用于表示一些不能显示出来的 ASCII 字符。\n"),t("img",{attrs:{src:"https://jihulab.com/AmosHogg/picbed/-/raw/main/pictures/2023/05/13_22_38_8_202305132238671.png",alt:"234"}})]),s._v(" "),t("blockquote",[t("p",[s._v("拓展：编码")]),s._v(" "),t("ul",[t("li",[s._v("ASCII (ASCII 编码表一个字节表示，一个 128 个字符，实际上一个字节可以表示 256 个字符,只用 128 个) Unicode (Unicode 编码表固定大小的编码使用两个字节来表示字符，字母和汉字统一都是占用两个字节， 这样浪费空间)")]),s._v(" "),t("li",[s._v("utf-8(编码表，大小可变的编码字母使用 1 个字节，汉字使用 3 个字节)")]),s._v(" "),t("li",[s._v("gbk(可以表示汉字，而且范围广，字母使用 1 个字节，汉字 2 个字节）")]),s._v(" "),t("li",[s._v("gb2312（可以表示汉字，gb2312 < gbk)")]),s._v(" "),t("li",[s._v("big5 码（繁体中文，台湾，香港）")])])]),s._v(" "),t("h3",{attrs:{id:"_1-5-布尔类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-布尔类型"}},[s._v("#")]),s._v(" 1.5 布尔类型")]),s._v(" "),t("p",[s._v("作用：布尔数据类型代表真或假的值。bool 类型占 1 个字节大小。")]),s._v(" "),t("p",[s._v("bool 类型只有两个值：")]),s._v(" "),t("ul",[t("li",[s._v("true --- 真（本质是 1）")]),s._v(" "),t("li",[s._v("false --- 假（本质是 0）")])]),s._v(" "),t("h3",{attrs:{id:"_1-6-sizeof-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-sizeof-关键字"}},[s._v("#")]),s._v(" 1.6 sizeof 关键字")]),s._v(" "),t("p",[s._v("利用 sizeof 关键字可以统计数据类型所占内存大小。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\ncout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"short 类型所占内存空间为： "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"int 类型所占内存空间为： "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"long 类型所占内存空间为： "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"long long 类型所占内存空间为： "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"_2-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量"}},[s._v("#")]),s._v(" 2. 变量")]),s._v(" "),t("p",[s._v("变量提供一个具名的、可供程序操作的存储空间。C+ +中的每个变量都有其数据类型， 数据类型决定者变量所占内存空间的大小和布局方式、该空间能存储的值的范围，以及变 量能参与的运算。对 C++程序员米说，“变量(variable)” 和“对象(object)”一般可以互换使用。")]),s._v(" "),t("h3",{attrs:{id:"_2-1-变量使用的基本步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-变量使用的基本步骤"}},[s._v("#")]),s._v(" 2.1 变量使用的基本步骤")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("声明变量\n在 C++中，在使用变量之前需要先声明变量。即告诉计算机在内存中创建一个空的空间，等待使用，这个空间的大小就是其数据类型的大小。语法：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("dataType variableName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("初始化变量\n在声明变量，我们会对变量进行赋值（定义）操作。而第一次赋值就叫做变量的初始化。变量在初始化后，仍可以重新赋值，但是在重新赋值前的语句中，变量的值不会改变。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("variableName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])]),s._v(" "),t("p",[s._v("变量定义的对象也可以是变量。例：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstd"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" “a is ‘” "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" “’"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b is ‘” "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" “’"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("”"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"_2-2-变量使用的注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-变量使用的注意事项"}},[s._v("#")]),s._v(" 2.2 变量使用的注意事项")]),s._v(" "),t("ol",[t("li",[s._v("变量表示内存中的一个存储区域[不同的变量，类型不同，占用的空间大小不同]")]),s._v(" "),t("li",[s._v("该区域有自己的名称[变量名]和类型[数据类型]")]),s._v(" "),t("li",[s._v("变量必须先声明，后使用，即有顺序")]),s._v(" "),t("li",[s._v("该区域的数据/值可以在同一类型范围内不断变化")]),s._v(" "),t("li",[s._v("变量在同一个作用城内不能重名")]),s._v(" "),t("li",[s._v("变量=变量名+值+数据类型，这一点请大家注意。变量三要素")])]),s._v(" "),t("blockquote",[t("p",[s._v("拓展：变量的命名\n"),t("strong",[s._v("1.变量的命名规则")]),s._v("\n命名规则（必须遵循）：")]),s._v(" "),t("ul",[t("li",[s._v("只能使用字母(大写和小写)、数字和下划线(_)\n标识符必须以字母或下划线开头")])]),s._v(" "),t("p",[t("strong",[s._v("2.变量的命名规范")]),s._v("\n驼峰命名法（Camel 命名法）")]),s._v(" "),t("blockquote",[t("p",[s._v("首个单词的首个字母小写，其余单词的首字母大写(enemyHp)。这里推荐用此命名规范命名变量。\nPascal 命名规范")])]),s._v(" "),t("blockquote",[t("p",[s._v("每个单词开头的字母大写(如 TestCounter)。如果使用到英文单词的缩写，全部使用大写(PI HP MP)。")])])]),s._v(" "),t("h2",{attrs:{id:"_3-类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-类型转换"}},[s._v("#")]),s._v(" 3. 类型转换")]),s._v(" "),t("p",[s._v("C++类型转换分为显式类型转换和隐式类型转换 ，隐式类型转换由编译器自动完成，这里只讲显式类型转换。")]),s._v(" "),t("h3",{attrs:{id:"_3-1-旧式风格的类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-旧式风格的类型转换"}},[s._v("#")]),s._v(" 3.1 旧式风格的类型转换")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("expr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数形式的强制类型转换")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("expr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// C语言风格的强制类型转换")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"_3-2-现代-c-风格的类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-现代-c-风格的类型转换"}},[s._v("#")]),s._v(" 3.2 现代 C++风格的类型转换")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("cast"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("expression"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("type 是转换的目标类型")]),s._v(" "),t("li",[s._v("expression 是被转换的值")]),s._v(" "),t("li",[s._v("cast-name 有 static_cast、dynamic_cast、")]),s._v(" "),t("li",[s._v("const_cast 和 reinterpret_cast 四种，表示转换的方式。")])]),s._v(" "),t("h4",{attrs:{id:"static-cast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#static-cast"}},[s._v("#")]),s._v(" static_cast")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v("static_cast<type>(expression)")])]),s._v(" "),t("p",[s._v("任何编写程序时能够明确的类型转换都可以使用"),t("code",[s._v("static_cast")]),s._v("（static_cast 不能转换掉底层 const，volatile 和__unaligned 属性）。由于不提供运行时的检查，所以叫 static_cast，因此，需要在编写程序时确认转换的安全性。")]),s._v(" "),t("p",[s._v("主要在以下几种场合中使用：")]),s._v(" "),t("ul",[t("li",[s._v("用于类层次结构中，父类和子类之间指针和引用的转换；进行上行转换，把子类对象的指针/引用转换为父类指针/引用，这种转换是安全的；进行下行转换，把父类对象的指针/引用转换成子类指针/引用，这种转换是不安全的，需要编写程序时来确认；")]),s._v(" "),t("li",[s._v("用于基本数据类型之间的转换，例如把 int 转 char，int 转 enum 等，需要编写程序时来确认安全性；")]),s._v(" "),t("li",[s._v("把 void 指针转换成目标类型的指针（这是极其不安全的）；")])]),s._v(" "),t("p",[s._v("示例：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" slope "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("static_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("dp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("static_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h4",{attrs:{id:"dynamic-cast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-cast"}},[s._v("#")]),s._v(" dynamic_cast")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v("dynamic_cast<type>(expression)")])]),s._v(" "),t("p",[s._v("相比 static_cast，dynamic_cast 会在运行时检查类型转换是否合法，具有一定的安全性。由于运行时的检查，所以会额外消耗一些性能。dynamic_cast 使用场景与 static 相似，在类层次结构中使用时，上行转换和 static_cast 没有区别，都是安全的；下行转换时，dynamic_cast 会检查转换的类型，相比 static_cast 更安全。")]),s._v(" "),t("p",[s._v("dynamic_cast 转换仅适用于指针或引用。")]),s._v(" "),t("p",[s._v("在转换可能发生的前提下，dynamic_cast 会尝试转换，若指针转换失败，则返回空指针，若引用转换失败，则抛出异常。")]),s._v(" "),t("h5",{attrs:{id:"_1-继承中的转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-继承中的转换"}},[s._v("#")]),s._v(" 1. 继承中的转换")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("上行转换：在继承关系中 ，dynamic_cast 由子类向父类的转换与 static_cast 和隐式转换一样，都是非常安全的。")])]),s._v(" "),t("li",[t("p",[s._v("下行转换")])])]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     A"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" pA "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     B"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" pB "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dynamic_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("B"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("注意类 A 和类 B 中定义了一个虚函数，这是不可缺少的。因为类中存在虚函数，说明它可能有子类，这样才有类型转换的情况发生，由于运行时类型检查需要运行时类型信息，而这个信息存储在类的虚函数表中，只有定义了虚函数的类才有虚函数表。")]),s._v(" "),t("h5",{attrs:{id:"_2-void-的转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-void-的转换"}},[s._v("#")]),s._v(" 2. void*的转换")]),s._v(" "),t("p",[s._v("一些情况下，我们需要将指针转换为 void*，然后再合适的时候重新将 void*转换为目标类型指针。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pA "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pV "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dynamic_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h5",{attrs:{id:"_3-菱形继承中的上行转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-菱形继承中的上行转换"}},[s._v("#")]),s._v(" 3.菱形继承中的上行转换")]),s._v(" "),t("p",[s._v("首先，定义一组菱形继承的类：")]),s._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1.class A { virtual void f() {}; };\n2.class B :public A { void f() {}; };\n3.class C :public A { void f() {}; };\n4.class D :public B, public C { void f() {}; };\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("继承关系如图：")]),s._v(" > "),t("img",{attrs:{src:"https://jihulab.com/AmosHogg/picbed/-/raw/main/pictures/2023/05/13_22_36_11_202305132236720.png",alt:"123"}}),s._v("\nB 继承 A，C 继承 A；D 继承 B 和 C。")]),s._v(" "),t("blockquote",[t("p",[s._v("考虑：D 对象指针能否安全的转换为 A 类型指针？\n可以的，因为从子类向父类转化，无论如何都是安全的。")])])]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("D")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    D "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pD "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" D"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pA "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dynamic_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pD"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pA = NULL")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("但实际上，如果尝试这样的转换，只能得到一个空指针。因为 B 和 C 都继承了 A，并且都实现了虚函数 f()，导致在进行转换时，无法选择一条转换路径。")]),s._v(" "),t("p",[s._v("一种可行的方法是，自行指定一条转换路径：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("D")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    D "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pD "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" D"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    B "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pB "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dynamic_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("B "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pD"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pA "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dynamic_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h4",{attrs:{id:"const-cast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#const-cast"}},[s._v("#")]),s._v(" const_cast")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v("const_cast<type>(expression)")])]),s._v(" "),t("p",[s._v("const_cast 用于移除类型的 const、volatile 和__unaligned 属性。")]),s._v(" "),t("p",[s._v("常量指针被转换成非常量指针，并且仍然指向原来的对象；常量引用被转换成非常量引用，并且仍然引用原来的对象。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("const_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"reinterpret-cast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reinterpret-cast"}},[s._v("#")]),s._v(" reinterpret_cast")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v("reinterpret_cast<type>(expression)")])]),s._v(" "),t("p",[s._v("非常激进的指针类型转换，在编译期完成，可以转换任何类型的指针，所以极不安全。非极端情况不要使用。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("reinterpret_cast")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"_4-常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-常量"}},[s._v("#")]),s._v(" 4. 常量")]),s._v(" "),t("p",[s._v("常量就是不可改变的量，又叫做"),t("strong",[s._v("字面量")]),s._v("。声明常量主要有两种方式：")]),s._v(" "),t("ul",[t("li",[s._v("#define 指令")]),s._v(" "),t("li",[s._v("const 修饰的常量")])]),s._v(" "),t("h3",{attrs:{id:"_4-1-define-预处理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-define-预处理器"}},[s._v("#")]),s._v(" 4.1 define 预处理器")]),s._v(" "),t("p",[s._v("下面是使用 #define 预处理器定义常量的形式：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("identifier")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[s._v("value")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("LENGTH")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")])])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("WIDTH")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")])])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("NEWLINE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'\\n'")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" area"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   area "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" LENGTH "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" WIDTH"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" area"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" NEWLINE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("h3",{attrs:{id:"_4-2-const-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-const-关键字"}},[s._v("#")]),s._v(" 4.2 const 关键字")]),s._v(" "),t("p",[s._v("您可以使用 "),t("strong",[s._v("const")]),s._v(" 前缀声明指定类型的常量，如下所示：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" type variable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("LENGTH")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")])])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("WIDTH")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")])])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("NEWLINE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'\\n'")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" area"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   area "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" LENGTH "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" WIDTH"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" area"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" NEWLINE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);