(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{391:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#_1-程序"}},[s._v("1. 程序")])]),t("li",[t("a",{attrs:{href:"#_2-语句和表达式"}},[s._v("2. 语句和表达式")]),t("ul",[t("li",[t("a",{attrs:{href:"#_2-1-语句"}},[s._v("2.1 语句")])]),t("li",[t("a",{attrs:{href:"#_2-2-表达式"}},[s._v("2.2 表达式")])])])]),t("li",[t("a",{attrs:{href:"#_3-函数"}},[s._v("3. 函数")]),t("ul",[t("li",[t("a",{attrs:{href:"#_3-1-函数调用基本步骤"}},[s._v("3.1 函数调用基本步骤")])]),t("li",[t("a",{attrs:{href:"#_3-2-函数参数"}},[s._v("3.2 函数参数")])])])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"_1-程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序"}},[s._v("#")]),s._v(" 1. 程序")]),s._v(" "),t("p",[s._v("计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合。")]),s._v(" "),t("p",[s._v("程序（Program）是计算机系统的必备元素，因为计算机系统由硬件、操作系统以及软件构成，而程序又是软件的组成部分。操作系统是管理和控制计算机硬件与软件资源的计算机软件，是直接运行在“裸机”上最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。可见操作系统也是一个特殊的程序，特殊在它扮演这一个统筹管理的角色，类似于国家职能机关，管理着社会大大小小的事务，让社会有条不紊的发展。")]),s._v(" "),t("p",[s._v("程序与软件（Software）的概念不同，但常常因为概念相似而被混淆。软件指程序与其相关文档或其他从属物的集合。一般的我们视程序为软件的一个组成部分，简单地说，“软件=程序+文档”。比如一个游戏软件包括程序（如.exe 等）和其它图片（如.bmp 等）、音效（如*.wav 等）、使用说明（如 readme.txt）等附件，那么这个程序称作“应用程序”（Application），而它与其他文件（图片、音效等）在一起合称“软件”。")]),s._v(" "),t("p",[s._v("本质上，程序是在计算机中执行的一系列指令，用于完成特定的目的，通常用某种程序设计语言编写。程序与编程语言、计算机和操作系统的关系，好比餐厅中完成一道酸菜鱼，厨房经理（操作系统）协调安排某厨师（计算机）按照某语言（比如汉语）编写的菜谱（程序），使用各种食材（鱼、八角、料酒等），烹饪出美味的酸菜鱼。软件可以看作菜谱和各种食材的集合，来完成特定的功能（烹饪美食）。")]),s._v(" "),t("p",[s._v("通常，代码文本文件经过预处理、编译、汇编和链接，生成人们不易理解的二进制指令文本，供计算机执行，这种二进制指令文件即为可执行的计算机程序。未经编译可解释运行的程序通常称之为脚本程序，未经编译不可执行的代码文件称之为源文件。下面以 C 语言为例，介绍一下学习编程语言的经典样例 helloword 程序的执行过程。源文件 helloworld.c 如下：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" argc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" argv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("使用 g++ helloword.c 编译默认生成名为 a.out 的可执行文件，执行输出结果为“hello world”。程序执行过程经历了如下步骤：")]),s._v(" "),t("ol",[t("li",[s._v("二进制可执行文件 a.out 存储在磁盘上，由 CPU 或 DMA 将 a.out 加载到主存，加载的数据包括指令和待输出的字符串 “hello word”；")]),s._v(" "),t("li",[s._v("CPU 依次从内存读取指令，执行指令，将“hello word”复制到寄存器；")]),s._v(" "),t("li",[s._v("CPU 将“hell world”从寄存器复制到标准输出（默认为显示器）。")])]),s._v(" "),t("p",[s._v("对于程序的理解，计算机科学家 Niklaus Wirth（尼古拉斯·沃斯）从本质上给出了简洁的定义“程序=算法+数据结构”。所以请记住，“软件=程序+文档=算法+数据结构+文档”。")]),s._v(" "),t("h2",{attrs:{id:"_2-语句和表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-语句和表达式"}},[s._v("#")]),s._v(" 2. 语句和表达式")]),s._v(" "),t("h3",{attrs:{id:"_2-1-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-语句"}},[s._v("#")]),s._v(" 2.1 语句")]),s._v(" "),t("p",[s._v("语句是命令式编程语言的一个语法单元，表示程序要执行的操作。程序是有一个或多个语句序列，语句可能包含内部组件（例如表达式）。")]),s._v(" "),t("p",[s._v("语句决定了程序的外观，编程语言表现为它们使用的语句类型（例如花括号），许多语句由标识符 if、while 或者 repeat 引入，语句关键字是保留的。")]),s._v(" "),t("p",[s._v("大多数语言中，语句和表达式的区别在于，语句不返回结果，执行语句只是为了产生副作用，而表达式总是返回结果，而通常没有副作用。")]),s._v(" "),t("p",[s._v("在命令式编程语言中，Algol 68 是少数几种语句可以返回结果的语言之一。在混合了命令式和函数式风格的语言中，如 Lisp 家族，表达式和语句之间没有区别。在纯函数式编程中，没有语句，一切都是表达式。")]),s._v(" "),t("p",[s._v("这种区别经常表现为：执行语句，而计算表达式。这可以在某些语言中的 exec 和 eval 函数中找到：在 Python 中，exec 应用于语句，eval 应用于表达式。")]),s._v(" "),t("p",[s._v("在 C++中，语句大部分是由分号结尾的。主要包括：")]),s._v(" "),t("ul",[t("li",[s._v("赋值表达式语句")]),s._v(" "),t("li",[s._v("函数表达式语句")]),s._v(" "),t("li",[s._v("空语句")]),s._v(" "),t("li",[s._v("复合语句（由花括号括起来的一条或多条语句）")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("语句&指令的关系：")])]),s._v(" "),t("p",[s._v("一条语句相当于一个完整的指令")]),s._v(" "),t("p",[s._v("一个指令却不一定是语句，比如 a+b 这个表达式也是一个指令，但是不是语句")])]),s._v(" "),t("h3",{attrs:{id:"_2-2-表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-表达式"}},[s._v("#")]),s._v(" 2.2 表达式")]),s._v(" "),t("p",[s._v("表达式是由运算符和运算对象组成的,单独的一个运算对象(常量/变量)也可以叫做表达式，这是最简单的表达式。包括：")]),s._v(" "),t("ul",[t("li",[s._v("基本表达式（primary expression）")]),s._v(" "),t("li",[s._v("常量表达式（constant expression）")]),s._v(" "),t("li",[s._v("后缀表达式（postfix expression）")]),s._v(" "),t("li",[s._v("一元表达式（unary expression）")]),s._v(" "),t("li",[s._v("强制转换表达式（cast expression）")]),s._v(" "),t("li",[s._v("乘法表达式（multiplicative expression）")]),s._v(" "),t("li",[s._v("加法表达式（additive expression）")]),s._v(" "),t("li",[s._v("移位表达式（shift expression）")]),s._v(" "),t("li",[s._v("关系表达式（relational expression）")]),s._v(" "),t("li",[s._v("相等表达式（equality expression）")]),s._v(" "),t("li",[s._v("AND 表达式（AND expression）")]),s._v(" "),t("li",[s._v("异或表达式（exclusive OR expression）")]),s._v(" "),t("li",[s._v("或表达式（inclusive OR expression）")]),s._v(" "),t("li",[s._v("逻辑与表达式（logical AND expression）")]),s._v(" "),t("li",[s._v("逻辑或表达式（logical OR expression）")]),s._v(" "),t("li",[s._v("条件表达式（conditional expression）")]),s._v(" "),t("li",[s._v("赋值表达式（assignment expression）")])]),s._v(" "),t("h2",{attrs:{id:"_3-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-函数"}},[s._v("#")]),s._v(" 3. 函数")]),s._v(" "),t("p",[s._v("函数是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 main() ，所有简单的程序都可以定义其他额外的函数。")]),s._v(" "),t("p",[s._v("您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。")]),s._v(" "),t("p",[s._v("函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。")]),s._v(" "),t("p",[s._v("C++ 标准库提供了大量的程序可以调用的内置函数。例如，函数 strcat() 用来连接两个字符串，函数 memcpy() 用来复制内存到另一个位置。")]),s._v(" "),t("p",[s._v("函数还有很多叫法，比如方法、子例程或程序，等等。")]),s._v(" "),t("hr"),s._v(" "),t("h3",{attrs:{id:"_3-1-函数调用基本步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-函数调用基本步骤"}},[s._v("#")]),s._v(" 3.1 函数调用基本步骤")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("定义函数")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("return_type "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("function_name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" parameter list "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     body of the function\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("在 C++ 中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：")]),s._v(" "),t("ul",[t("li",[s._v("返回类型：一个函数可以返回一个值。return_type 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 void。")]),s._v(" "),t("li",[s._v("函数名称：这是函数的实际名称。函数名和参数列表一起构成了函数签名。")]),s._v(" "),t("li",[s._v("参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。")]),s._v(" "),t("li",[s._v("函数主体：函数主体包含一组定义函数执行任务的语句。")])])]),s._v(" "),t("li",[t("p",[s._v("函数声明\n函数声明会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。")]),s._v(" "),t("p",[s._v("函数声明包括以下几个部分：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("return_type "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("function_name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" parameter list "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("针对上面定义的函数 max()，以下是函数声明：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。")])]),s._v(" "),t("li",[t("p",[s._v("调用函数")])])]),s._v(" "),t("p",[s._v("创建 C++ 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。")]),s._v(" "),t("p",[s._v("当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。")]),s._v(" "),t("p",[s._v("调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数声明")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 局部变量声明")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" ret"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用函数来获取最大值")]),s._v("\n   ret "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Max value is : "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" ret "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数返回两个数中较大的那个数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 局部变量声明")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n      result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("p",[s._v("把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果："),t("code",[s._v("Max value is : 200")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"_3-2-函数参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-函数参数"}},[s._v("#")]),s._v(" 3.2 函数参数")]),s._v(" "),t("p",[s._v("如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的形式参数。")]),s._v(" "),t("p",[s._v("形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。")]),s._v(" "),t("p",[s._v("当调用函数时，有三种向函数传递参数的方式：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("调用类型")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("传值调用")]),s._v(" "),t("td",[s._v("该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。")])]),s._v(" "),t("tr",[t("td",[s._v("指针调用")]),s._v(" "),t("td",[s._v("该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。")])]),s._v(" "),t("tr",[t("td",[s._v("引用调用")]),s._v(" "),t("td",[s._v("该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。")])])])]),s._v(" "),t("p",[s._v("默认情况下，C++ 使用传值调用来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的参数。之前提到的实例，调用 max() 函数时，使用了相同的方法。")]),s._v(" "),t("p",[s._v("当您定义一个函数，您可以为参数列表中后边的每一个参数指定默认值。当调用函数时，如果实际参数的值留空，则使用这个默认值。")]),s._v(" "),t("p",[s._v("这是通过在函数定义中使用赋值运算符来为参数赋值的。调用函数时，如果未传递参数的值，则会使用默认值，如果指定了值，则会忽略默认值，使用传递的值。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 局部变量声明")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用函数来添加值")]),s._v("\n   result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Total value is :"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 再次调用函数")]),s._v("\n   result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Total value is :"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("p",[s._v("当上面的代码被编译和执行时，它会产生下列结果：")]),s._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Total value is :300\nTotal value is :120\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);