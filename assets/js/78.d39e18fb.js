(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{393:function(t,a,_){"use strict";_.r(a);var s=_(3),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_1-算术运算符"}},[t._v("1. 算术运算符")])]),a("li",[a("a",{attrs:{href:"#_2-赋值运算符"}},[t._v("2. 赋值运算符")])]),a("li",[a("a",{attrs:{href:"#_3-比较运算符"}},[t._v("3. 比较运算符")])]),a("li",[a("a",{attrs:{href:"#_4-逻辑运算符"}},[t._v("4. 逻辑运算符")]),a("ul",[a("li",[a("a",{attrs:{href:"#_2-1-短路与-和-逻辑与"}},[t._v("2.1 短路与（&&）和 逻辑与（&）")])]),a("li",[a("a",{attrs:{href:"#_2-2-短路或-和逻辑或"}},[t._v("2.2 短路或（||）和逻辑或（|）")])]),a("li",[a("a",{attrs:{href:"#_2-3-取反-和逻辑异或"}},[t._v("2.3 取反（！）和逻辑异或（^）")])]),a("li",[a("a",{attrs:{href:"#_2-4-三元运算符"}},[t._v("2.4 三元运算符")])]),a("li",[a("a",{attrs:{href:"#_2-5-运算符的优先级"}},[t._v("2.5 运算符的优先级")])])])])])]),a("p"),t._v(" "),a("p",[t._v("运算符用于执行代码的运算，主要的运算符有四种：")]),t._v(" "),a("ul",[a("li",[t._v("赋值运算符 用于将表达式的值赋给变量")]),t._v(" "),a("li",[t._v("比较运算符 用于表达式的比较，并返回一个真值或假值")]),t._v(" "),a("li",[t._v("逻辑运算符 用于根据表达式的值返回真值或假值")])]),t._v(" "),a("h2",{attrs:{id:"_1-算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-算术运算符"}},[t._v("#")]),t._v(" 1. 算术运算符")]),t._v(" "),a("p",[t._v("算数运算符主要用于数据的运算（四则运算 +、-、*、/、%、++、--）。例如：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" “c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ” "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("程序运行结果为 3。可见算数算术运算符的运算规则与数学上一致。")]),t._v(" "),a("p",[t._v("值得一提的是除运算符，它与我们日常的算法并不一样。在我们写入 10/4 时，计算机并不会输出 2.5 而是 2，因为 int / int 结果应该还是 int，后面的 .5 溢出。这里就要说一下运算符和类型转换了。")]),t._v(" "),a("p",[t._v("在 C++中，如果两个值的数据类型相同，那么运算符会直接运算，结果的数据类型与前者相同；但是如果两个值的数据类型不同，那么运算符会将精度较小的值隐式转换为较大的数据类型。例如：20.0 / 4 是 5.0 而不是 5，因为编译器会先将 4（int）转换为 4.0（float）再进行运算。")]),t._v(" "),a("p",[t._v("但是有一点需要注意 (double)(10 / 4) 的返回值为 2.0 而不是 2.5，因为此语法是讲 10 / 4 的结果即 2 显式转换为 2.0。如果想要得出一个浮点数的结果，将 10 或 4 转换为浮点数即可。")]),t._v(" "),a("p",[t._v("在算术运算符中，有两个运算符是我们在生活中没有接触的，即自增运算符（++）和自检运算符（--）。")]),t._v(" "),a("p",[t._v("自增运算符又分为前缀自增运算符和后缀自增运算符。前缀自增运算符指的是先对变量进行++操作，再计算表达式；而后缀自增运算符相反。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" “a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ” "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" “"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ” "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" “a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ” "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" “"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ” "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 2")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"_2-赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-赋值运算符"}},[t._v("#")]),t._v(" 2. 赋值运算符")]),t._v(" "),a("p",[t._v("赋值运算符用于将表达式的值赋给变量。赋值运算符主要包含")]),t._v(" "),a("p",[t._v("赋值运算符主要包括：=、+=、-=、*=、/=。例如：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = a + 1 = 2")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ol",[a("li",[t._v("运算顺序从右往左 int num = a + b + c;")]),t._v(" "),a("li",[t._v("赋值运算符的左边 只能是变量,右边 可以是变量、表达式、常量值 int num = 20; int num2= 78 * 34 - 10; int num3 = a;")]),t._v(" "),a("li",[t._v("复合赋值运算符等价于下面的效果 比如：a+=3;等价于 a=a+3; 其他类推")]),t._v(" "),a("li",[t._v("复合赋值运算符会进行类型转换。 byte b = 2; b+=3; b++;")])]),t._v(" "),a("h2",{attrs:{id:"_3-比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-比较运算符"}},[t._v("#")]),t._v(" 3. 比较运算符")]),t._v(" "),a("p",[t._v("比较运算符用于表达式的比较，并返回一个真值或假值。")]),t._v(" "),a("p",[t._v("比较运算符有：==、！=、>=、<=、>、<。与数学运算规则相同。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("运算")]),t._v(" "),a("th",[t._v("范例")]),t._v(" "),a("th",[t._v("结构")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("==")]),t._v(" "),a("td",[t._v("相等于")]),t._v(" "),a("td",[t._v("8==7")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("！=")]),t._v(" "),a("td",[t._v("不等于")]),t._v(" "),a("td",[t._v("8！=7")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("<")]),t._v(" "),a("td",[t._v("小于")]),t._v(" "),a("td",[t._v("8<7")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v(">")]),t._v(" "),a("td",[t._v("大于")]),t._v(" "),a("td",[t._v("8>7")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("<=")]),t._v(" "),a("td",[t._v("小于等于")]),t._v(" "),a("td",[t._v("8<=7")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v(">=")]),t._v(" "),a("td",[t._v("大于等于")]),t._v(" "),a("td",[t._v("8>=7")]),t._v(" "),a("td",[t._v("true")])])])]),t._v(" "),a("p",[a("strong",[t._v("注意：")])]),t._v(" "),a("ol",[a("li",[t._v("关系运算符的结果都是 boolean 型，也就是要么是 true，要么是 false；")]),t._v(" "),a("li",[t._v("关系运算符组成的表达式，我们称为关系表达式；")]),t._v(" "),a("li",[t._v('比较运算符"=="不能误写成"="。')])]),t._v(" "),a("h2",{attrs:{id:"_4-逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-逻辑运算符"}},[t._v("#")]),t._v(" 4. 逻辑运算符")]),t._v(" "),a("p",[t._v("逻辑运算符用于连接多个条件（多个关系表达式），最终的结果也是一个 boolean 值。")]),t._v(" "),a("p",[t._v("逻辑运算符主要分为两类：")]),t._v(" "),a("ol",[a("li",[t._v("短路与 &&， 短路或 ||，取反 !")]),t._v(" "),a("li",[t._v("逻辑与 &，逻辑或 |，逻辑异或^")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("a")]),t._v(" "),a("th",[t._v("b")]),t._v(" "),a("th",[t._v("a&b")]),t._v(" "),a("th",[t._v("a&&b")]),t._v(" "),a("th",[t._v("a|b")]),t._v(" "),a("th",[t._v("a||b")]),t._v(" "),a("th",[t._v("!a")]),t._v(" "),a("th",[t._v("a^b")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("true")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("false")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("false")])])])]),t._v(" "),a("p",[t._v("说明逻辑运算规则：")]),t._v(" "),a("ol",[a("li",[t._v("a&b : & 叫逻辑与：规则：当 a 和 b 同时为 true ,则结果为 true, 否则为 false")]),t._v(" "),a("li",[t._v("a&&b : && 叫短路与：规则：当 a 和 b 同时为 true ,则结果为 true,否则为 false")]),t._v(" "),a("li",[t._v("a|b : | 叫逻辑或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false")]),t._v(" "),a("li",[t._v("a||b : || 叫短路或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false")]),t._v(" "),a("li",[t._v("!a : 叫取反，或者非运算。当 a 为 true, 则结果为 false, 当 a 为 false 是，结果为 true")]),t._v(" "),a("li",[t._v("a^b: 叫逻辑异或，当 a 和 b 不同时，则结果为 true, 否则为 false")])]),t._v(" "),a("h3",{attrs:{id:"_2-1-短路与-和-逻辑与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-短路与-和-逻辑与"}},[t._v("#")]),t._v(" 2.1 短路与（&&）和 逻辑与（&）")]),t._v(" "),a("h4",{attrs:{id:"_2-1-1-基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-基本使用"}},[t._v("#")]),t._v(" 2.1.1 基本使用")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("语法")]),t._v(" "),a("th",[t._v("特点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("短路与&&")]),t._v(" "),a("td",[t._v("条件 1&&条件 2")]),t._v(" "),a("td",[t._v("两个条件都为 true，结果为 true,否则 false")])]),t._v(" "),a("tr",[a("td",[t._v("逻辑与&")]),t._v(" "),a("td",[t._v("条件 1&条件 2")]),t._v(" "),a("td",[t._v("两个条件都为 true，结果为 true,否则 false")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-1-2-使用区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-使用区别"}},[t._v("#")]),t._v(" 2.1.2 使用区别")]),t._v(" "),a("ol",[a("li",[t._v("&&短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高 ；")]),t._v(" "),a("li",[t._v("& 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低；")]),t._v(" "),a("li",[t._v("开发中， 我们使用的基本是使用短路与&&, 效率高。")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-短路或-和逻辑或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-短路或-和逻辑或"}},[t._v("#")]),t._v(" 2.2 短路或（||）和逻辑或（|）")]),t._v(" "),a("h4",{attrs:{id:"_2-2-1-基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-基本使用"}},[t._v("#")]),t._v(" 2.2.1 基本使用")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("语法")]),t._v(" "),a("th",[t._v("特点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("短路或||")]),t._v(" "),a("td",[t._v("条件 1||条件 2")]),t._v(" "),a("td",[t._v("两个条件中只要有一个成立，结果为 true,否则为 false")])]),t._v(" "),a("tr",[a("td",[t._v("逻辑或 |")]),t._v(" "),a("td",[t._v("条件 1|条件 2")]),t._v(" "),a("td",[t._v("只要有一个条件成立，结果为 true,否则为 false")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-2-2-使用区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-使用区别"}},[t._v("#")]),t._v(" 2.2.2 使用区别")]),t._v(" "),a("ol",[a("li",[t._v("||短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为 true，效率高")]),t._v(" "),a("li",[t._v("| 逻辑或：不管第一个条件是否为 true，第二个条件都要判断，效率低")]),t._v(" "),a("li",[t._v("开发中，我们基本使用 ||")])]),t._v(" "),a("h3",{attrs:{id:"_2-3-取反-和逻辑异或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-取反-和逻辑异或"}},[t._v("#")]),t._v(" 2.3 取反（！）和逻辑异或（^）")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("语法")]),t._v(" "),a("th",[t._v("特点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("! 非（取反）")]),t._v(" "),a("td",[t._v("!条件")]),t._v(" "),a("td",[t._v("如果条件本身成立，结果为 false，否则为 true")])]),t._v(" "),a("tr",[a("td",[t._v("逻辑异或")]),t._v(" "),a("td",[t._v("a^b")]),t._v(" "),a("td",[t._v("当 a 和 b 不同时，则结果为 true, 否则为 false")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-4-三元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-三元运算符"}},[t._v("#")]),t._v(" 2.4 三元运算符")]),t._v(" "),a("p",[a("code",[t._v("条件表达式 ? 表达式 1: 表达式 2;")])]),t._v(" "),a("p",[t._v("运算规则： 1.如果条件表达式为 true，运算后的结果是表达式 1； 2.如果条件表达式为 false，运算后的结果是表达式 2。")]),t._v(" "),a("h3",{attrs:{id:"_2-5-运算符的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-运算符的优先级"}},[t._v("#")]),t._v(" 2.5 运算符的优先级")]),t._v(" "),a("p",[t._v("在一个表达式中可能包含多个有不同运算符连接起来的、具有不同数据类型的数据对象；由于表达式有多种运算，不同的结合顺序可能得出不同结果甚至出现错误运算错误，因为当表达式中含多种运算时，必须按一定顺序进行结合，才能保证运算的合理性和结果的正确性、唯一性。")]),t._v(" "),a("p",[t._v("优先级从上到下依次递减，最上面具有最高的优先级，逗号操作符具有最低的优先级。表达式的结合次序取决于表达式中各种运算符的优先级。优先级高的运算符先结合，优先级低的运算符后结合，同一行中的运算符的优先级相同。")]),t._v(" "),a("p",[t._v("优先级与求值顺序无关。如 a+b && bc，虽然优先级最高，但这个表达式求值顺序是从左到右。\n优先级从上到下依次递减，最上面具有最高的优先级，逗号操作符具有最低的优先级。相同优先级中，按结合性进行结合。大多数运算符结合性是从左到右，只有三个优先级是从右至左结合的，它们是单目运算符、条件运算符、赋值运算符。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:/jihulab.com/AmosHogg/picbed/-/raw/main/pictures/2023/05/14_10_41_7_202305141041604.png",alt:"123"}})])])}),[],!1,null,null,null);a.default=v.exports}}]);